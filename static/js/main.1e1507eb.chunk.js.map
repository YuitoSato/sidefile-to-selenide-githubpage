{"version":3,"sources":["side-file-data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SideFileData","scenarios","Object","classCallCheck","this","createClass","key","value","map","scenario","toSelenide","join","Scenario","name","host","commands","_this","resultSourceCode","concat","command","Command","commandType","target","App","state","code","handleChangeFile","e","files","file","item","reader","FileReader","readAsText","addEventListener","result","raw","JSON","parse","tests","targets","length","filter","t","replace","url","sideFileData","setState","_this2","react_default","a","createElement","className","type","accept","onChange","lib_default","onValueChange","highlight","languages","java","padding","style","fontFamily","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e1507eb.chunk.js","sourcesContent":["const TAB = '\\t';\nconst NEW_LINE = '\\n';\n\nexport class SideFileData {\n  constructor(\n    public scenarios: Scenario[],\n  ) {}\n\n  public toSelenide(): string {\n    return this.scenarios.map(scenario => scenario.toSelenide()).join(NEW_LINE);\n  }\n}\n\nexport class Scenario {\n  constructor(\n    public name: string,\n    public host: string,\n    public commands: Command[]\n  ) {}\n\n  public toSelenide(): string {\n    let resultSourceCode = `public class ${this.name} {${NEW_LINE}`;\n\n    resultSourceCode += `${TAB}public void exec() {${NEW_LINE}`;\n\n    resultSourceCode += this.commands.map(command =>\n      command.toSelenide(this.host)\n    ).join('');\n\n    resultSourceCode += `${TAB}}${NEW_LINE}}`;\n\n    return resultSourceCode;\n  }\n}\n\nexport class Command {\n  constructor(\n    public commandType: string,\n    public target: string,\n    public value?: string,\n  ) {}\n\n  public toSelenide(host: string): string {\n    switch(this.commandType) {\n      case 'open':\n        return `${TAB}${TAB}Selenide.open(\"${host}${this.target}\");${NEW_LINE}`;\n      case 'click':\n        return `${TAB}${TAB}$(\"${this.target}\").click();${NEW_LINE}`;\n      case 'type':\n        return `${TAB}${TAB}$(\"${this.target}\").val(\"${this.value}\");${NEW_LINE}`;\n      default:\n        return '';\n    }\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport './prism.css';\nimport { highlight, languages } from 'prismjs';\nimport { Command, Scenario, SideFileData } from './side-file-data';\nimport 'prismjs/components/prism-java.min';\n\nclass App extends React.Component {\n  state = {\n    code: ''\n  };\n\n  handleChangeFile = (e: ChangeEvent<HTMLInputElement>) => {\n    const target: HTMLInputElement = e.target;\n\n    if (!target.files) {\n      return;\n    }\n    const file = target.files.item(0);\n\n    if (!file) {\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.readAsText( file );\n\n    reader.addEventListener('load', () => {\n      if (reader.result) {\n        const raw = JSON.parse(reader.result as string);\n\n        const scenarios = raw.tests.map((scenario: any) => {\n          const commands = scenario.commands.map((command: any) => {\n            let target;\n\n            if (command.targets.length < 1) {\n              target = command.target;\n            } else {\n              target = command.targets.filter((t: string[]) => t[1] === 'css:finder')[0][0].replace('css=', '');\n            }\n\n            return new Command(\n              command.command,\n              target,\n              command.value\n            )\n          });\n\n          return new Scenario(\n            scenario.name,\n            raw.url,\n            commands\n          )\n        });\n\n        const sideFileData = new SideFileData(\n          scenarios\n        );\n\n        this.setState({ code: sideFileData.toSelenide() });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            type=\"file\"\n            accept=\"side\"\n            onChange={(e) => this.handleChangeFile(e)}/>\n          <Editor\n            value={this.state.code}\n            onValueChange={code => this.setState({ code })}\n            highlight={code => highlight(code, languages.java, 'java')}\n            padding={10}\n            style={{\n              fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n              fontSize: 12,\n            }}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}